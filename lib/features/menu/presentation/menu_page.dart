import 'package:flutter/material.dart';
import '../../../core/constants/app_colors.dart';
import '../../../shared/models/category_model.dart';
import '../../../shared/API/api_category.dart';
import '../../../shared/widgets/widget_category.dart';
import '../../../shared/models/product_models.dart'; // Import Product model
import '../../../shared/API/api_product.dart'; // Import Product API
import '../../../shared/widgets/product_card.dart'; // Import Product card widget

// Trang Menu v·ªõi StatefulWidget ƒë·ªÉ qu·∫£n l√Ω state
class MenuPage extends StatefulWidget {
  const MenuPage({super.key});

  @override
  State<MenuPage> createState() => _MenuPageState();
}

// State class cho MenuPage
class _MenuPageState extends State<MenuPage> {
  // Bi·∫øn qu·∫£n l√Ω categories
  List<Category> categories = []; // Danh s√°ch categories
  bool isLoading = true; // Tr·∫°ng th√°i loading
  String errorMessage = ''; // Th√¥ng b√°o l·ªói

  List<Product> products = []; // Danh s√°ch s·∫£n ph·∫©m
  bool isProductsLoading = true; // Tr·∫°ng th√°i loading s·∫£n ph·∫©m
  String productsErrorMessage = ''; // Th√¥ng b√°o l·ªói s·∫£n ph·∫©m
  int? selectedCategoryId; // Category ƒë∆∞·ª£c ch·ªçn

  @override
  void initState() {
    super.initState(); // G·ªçi h√†m initState c·ªßa class cha
    loadCategories(); // Load categories khi kh·ªüi t·∫°o
  }

  // H√†m load categories t·ª´ API
  Future<void> loadCategories() async {
    try {
      setState(() {
        isLoading = true; // B·∫Øt ƒë·∫ßu loading
        errorMessage = ''; // X√≥a l·ªói c≈©
      });

      // G·ªçi API l·∫•y categories
      final categoryList = await ApiService.getCategories();

      print(
        '‚úÖ MenuPage: Load th√†nh c√¥ng ${categoryList.length} categories',
      ); // Log th√†nh c√¥ng

      setState(() {
        categories = categoryList; // L∆∞u d·ªØ li·ªáu
        isLoading = false; // T·∫Øt loading
      });

      // ‚≠ê TH√äM PH·∫¶N N√ÄY: T·ª± ƒë·ªông load products c·ªßa category ƒë·∫ßu ti√™n
      if (categories.isNotEmpty) {
        await loadProductsByCategory(
          categories[0].id,
        ); // Load products c·ªßa category index 0
      }
    } catch (e) {
      print('‚ùå MenuPage: L·ªói load categories: $e'); // Log l·ªói

      setState(() {
        errorMessage = e.toString(); // L∆∞u th√¥ng b√°o l·ªói
        isLoading = false; // T·∫Øt loading
      });
    }
  }

  // H√†m load products theo category ID
  Future<void> loadProductsByCategory(int categoryId) async {
    try {
      print(
        'üîÑ MenuPage: B·∫Øt ƒë·∫ßu load products cho category $categoryId...',
      ); // Log debug

      setState(() {
        isProductsLoading = true; // B·∫Øt ƒë·∫ßu loading products
        productsErrorMessage = ''; // X√≥a l·ªói c≈©
        selectedCategoryId = categoryId; // L∆∞u category ƒë∆∞·ª£c ch·ªçn
      });

      // G·ªçi API l·∫•y products theo category
      final productList = await ProductApiService.getProductsByCategory(
        categoryId,
      );

      print(
        '‚úÖ MenuPage: Load th√†nh c√¥ng ${productList.length} products',
      ); // Log th√†nh c√¥ng

      setState(() {
        products = productList; // L∆∞u d·ªØ li·ªáu products
        isProductsLoading = false; // T·∫Øt loading
      });
    } catch (e) {
      print('‚ùå MenuPage: L·ªói load products: $e'); // Log l·ªói

      setState(() {
        productsErrorMessage = e.toString(); // L∆∞u th√¥ng b√°o l·ªói
        isProductsLoading = false; // T·∫Øt loading
      });
    }
  }

  // H√†m refresh t·∫•t c·∫£ d·ªØ li·ªáu
  Future<void> refreshAllData() async {
    await loadCategories(); // Load l·∫°i categories

    // N·∫øu ƒë√£ ch·ªçn category, load l·∫°i products
    if (selectedCategoryId != null) {
      await loadProductsByCategory(selectedCategoryId!);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Menu',
          style: TextStyle(color: AppColors.white, fontWeight: FontWeight.bold),
        ),
        backgroundColor: AppColors.darkGreen,
        elevation: 0,
        centerTitle: true,
        iconTheme: const IconThemeData(color: AppColors.white),
      ),

      body: RefreshIndicator(
        onRefresh:
            refreshAllData, // Thay ƒë·ªïi t·ª´ loadCategories th√†nh refreshAllData
        child: Column(
          // ‚≠ê THAY ƒê·ªîI: T·ª´ SingleChildScrollView th√†nh Column
          children: [
            // PH·∫¶N 1: Categories (c·ªë ƒë·ªãnh ·ªü tr√™n)
            Container(
              color: AppColors.white,
              child: Column(
                children: [
                  const SizedBox(height: 16),
                  Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16),
                    child:
                        _buildCategoriesSection(), // Categories horizontal scroll
                  ),
                  const SizedBox(height: 8),
                  const Divider(height: 1, color: AppColors.lightCream),
                ],
              ),
            ),

            // PH·∫¶N 2: Products (cu·ªôn ƒë∆∞·ª£c) - ‚≠ê TH√äM PH·∫¶N N√ÄY
            Expanded(
              // Chi·∫øm h·∫øt kh√¥ng gian c√≤n l·∫°i
              child:
                  _buildProductsSection(), // ‚úÖ S·ª¨ D·ª§NG _buildProductsSection() ·ªü ƒë√¢y!
            ),
          ],
        ),
      ),
    );
  }

  // H√†m private t·∫°o ph·∫ßn categories
  Widget _buildCategoriesSection() {
    // Ki·ªÉm tra n·∫øu ƒëang loading
    if (isLoading) {
      return const Center(
        // CƒÉn gi·ªØa
        child: Column(
          // C·ªôt ch·ª©a loading indicator v√† text
          children: [
            CircularProgressIndicator(
              // Loading indicator tr√≤n
              color: AppColors.gray, // M√†u x√°m
            ),
            SizedBox(height: 16), // Kho·∫£ng c√°ch 16px
            Text(
              'ƒêang t·∫£i danh m·ª•c...', // Text loading
              style: TextStyle(
                color: AppColors.brown, // M√†u n√¢u
                fontSize: 16, // C·ª° ch·ªØ 16
              ),
            ),
          ],
        ),
      );
    }

    // Ki·ªÉm tra n·∫øu c√≥ l·ªói
    if (errorMessage.isNotEmpty) {
      return Center(
        // CƒÉn gi·ªØa
        child: Column(
          // C·ªôt ch·ª©a c√°c ph·∫ßn t·ª≠ l·ªói
          mainAxisAlignment: MainAxisAlignment.center, // CƒÉn gi·ªØa theo tr·ª•c d·ªçc
          children: [
            const Icon(
              Icons.error_outline, // Icon l·ªói
              size: 60, // K√≠ch th∆∞·ªõc 60px
              color: AppColors.brown, // M√†u n√¢u
            ),
            const SizedBox(height: 16), // Kho·∫£ng c√°ch 16px
            Text(
              'L·ªói: $errorMessage', // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
              style: const TextStyle(
                color: AppColors.brown, // M√†u n√¢u
                fontSize: 16, // C·ª° ch·ªØ 16
              ),
              textAlign: TextAlign.center, // CƒÉn gi·ªØa text
            ),
            const SizedBox(height: 16), // Kho·∫£ng c√°ch 16px
            ElevatedButton(
              // Button th·ª≠ l·∫°i
              onPressed: loadCategories, // G·ªçi l·∫°i h√†m load
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.gray, // M√†u n·ªÅn cam
                foregroundColor: AppColors.white, // M√†u ch·ªØ tr·∫Øng
                padding: const EdgeInsets.symmetric(
                  // Padding button
                  horizontal: 24, // Tr√°i ph·∫£i 24px
                  vertical: 12, // Tr√™n d∆∞·ªõi 12px
                ),
              ),
              child: const Text('Th·ª≠ l·∫°i'), // Text tr√™n button
            ),
          ],
        ),
      );
    }

    // Ki·ªÉm tra n·∫øu danh s√°ch r·ªóng
    if (categories.isEmpty) {
      return Center(
        // CƒÉn gi·ªØa
        child: Column(
          // C·ªôt ch·ª©a icon v√† text
          children: [
            const Icon(
              Icons.restaurant, // Icon nh√† h√†ng
              size: 60, // K√≠ch th∆∞·ªõc 60px
              color: AppColors.brown, // M√†u n√¢u
            ),
            const SizedBox(height: 16), // Kho·∫£ng c√°ch 16px
            const Text(
              'Kh√¥ng c√≥ danh m·ª•c n√†o', // Text th√¥ng b√°o
              style: TextStyle(
                color: AppColors.brown, // M√†u n√¢u
                fontSize: 16, // C·ª° ch·ªØ 16
              ),
            ),
          ],
        ),
      );
    }

    // Tr·∫£ v·ªÅ UI ch√≠nh khi c√≥ d·ªØ li·ªáu
    return Column(
      // C·ªôt ch·ª©a header v√† grid
      crossAxisAlignment: CrossAxisAlignment.start, // CƒÉn tr√°i
      children: [
        // Header v·ªõi title
        Row(
          // H√†ng ngang
          mainAxisAlignment: MainAxisAlignment.spaceBetween, // CƒÉn ƒë·ªÅu hai ƒë·∫ßu
          children: [
            const Text(
              'Danh m·ª•c m√≥n ƒÉn', // Ti√™u ƒë·ªÅ
              style: TextStyle(
                fontSize: 20, // C·ª° ch·ªØ 20
                fontWeight: FontWeight.bold, // Ch·ªØ ƒë·∫≠m
                color: AppColors.brown, // M√†u n√¢u
              ),
            ),
            Text(
              '${categories.length} danh m·ª•c', // S·ªë l∆∞·ª£ng danh m·ª•c
              style: const TextStyle(
                fontSize: 14, // C·ª° ch·ªØ 14
                color: AppColors.darkGreen, // M√†u xanh ƒë·∫≠m
                fontWeight: FontWeight.w500, // Ch·ªØ v·ª´a ƒë·∫≠m
              ),
            ),
          ],
        ),

        const SizedBox(height: 16), // Kho·∫£ng c√°ch 16px
        SizedBox(
          height: 120,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            padding: const EdgeInsets.symmetric(horizontal: 4),
            itemCount: categories.length,
            itemBuilder: (context, index) {
              final category = categories[index];
              final isSelected =
                  selectedCategoryId ==
                  category.id; // ‚≠ê TH√äM: Ki·ªÉm tra category ƒë∆∞·ª£c ch·ªçn

              return Container(
                width: 100,
                margin: const EdgeInsets.only(right: 12),
                child: GestureDetector(
                  onTap: () {
                    print('ƒê√£ ch·ªçn: ${category.name}');
                    loadProductsByCategory(category.id);
                  },
                  child: Container(
                    // ‚≠ê TH√äM: Container wrapper ƒë·ªÉ highlight
                    decoration: BoxDecoration(
                      border: Border.all(
                        color: isSelected
                            ? AppColors.darkGreen
                            : Colors.transparent, // Border cam n·∫øu ƒë∆∞·ª£c ch·ªçn
                        width: 2,
                      ),
                      borderRadius: BorderRadius.circular(12),
                    ),
                    child: CategoryCard(category: category),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  //H√†m t·∫°o Product
  Widget _buildProductsSection() {
    if (selectedCategoryId == null) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.restaurant_menu, size: 60, color: AppColors.accent),
            SizedBox(height: 16),
            Text(
              'Vui l√≤ng ch·ªçn m·ªôt danh m·ª•c',
              style: TextStyle(color: AppColors.brown),
            ),
          ],
        ),
      );
    }
    // Ki·ªÉm tra n·∫øu ƒëang loading products
    if (isProductsLoading) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularProgressIndicator(color: AppColors.gray),
            SizedBox(height: 16),
            Text(
              'ƒêang t·∫£i s·∫£n ph·∫©m...',
              style: TextStyle(fontSize: 16, color: AppColors.brown),
            ),
          ],
        ),
      );
    }

    // Ki·ªÉm tra n·∫øu c√≥ l·ªói loading products
    if (productsErrorMessage.isNotEmpty) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              const Icon(Icons.error_outline, size: 60, color: AppColors.brown),
              const SizedBox(height: 16),
              const Text(
                'Kh√¥ng th·ªÉ t·∫£i s·∫£n ph·∫©m',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: AppColors.brown,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                productsErrorMessage,
                style: const TextStyle(
                  fontSize: 14,
                  color: AppColors.darkGreen,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 24),
              ElevatedButton(
                onPressed: () => loadProductsByCategory(selectedCategoryId!),
                style: ElevatedButton.styleFrom(
                  backgroundColor: AppColors.gray,
                  foregroundColor: AppColors.white,
                ),
                child: const Text('Th·ª≠ l·∫°i'),
              ),
            ],
          ),
        ),
      );
    }

    // Ki·ªÉm tra n·∫øu danh s√°ch products r·ªóng
    if (products.isEmpty) {
      // T√¨m t√™n category
      final categoryName = categories
          .firstWhere(
            (cat) => cat.id == selectedCategoryId,
            orElse: () => Category(id: 0, name: 'Kh√¥ng x√°c ƒë·ªãnh', image: ''),
          )
          .name;

      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.restaurant,
              size: 60,
              color: AppColors.brown.withOpacity(0.5),
            ),
            const SizedBox(height: 16),
            const Text(
              'Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.w500,
                color: AppColors.brown,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Danh m·ª•c "$categoryName" ƒëang ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
              style: TextStyle(
                fontSize: 14,
                color: AppColors.brown.withOpacity(0.7),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }
    return Column(
      children: [
        Container(
          width: double.infinity, //Ngang full
          padding: const EdgeInsets.all(16), //cƒÉn l·ªÅ t·∫•t c·∫£ c·∫•c h∆∞·ªõng
          color: AppColors.white,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween, //cƒÉn ƒë·ªëi di·ªán
            children: [
              Text(
                'S·∫£n Ph·∫©m',
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: AppColors.brown,
                ),
              ),
            ],
          ),
        ),
        //Product List Grid
        Expanded(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: GridView.builder(
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2, //2 c·ªôt
                childAspectRatio: 0.75, // t·ªâ l·ªá width/height = 0.75
                crossAxisSpacing: 12, //kho·∫£n c√°ch gi·ªØa c√°cc c·ªôt
                mainAxisSpacing: 12, //kho·∫£n c√°ch gi·ªØa c√°c h√†ng
              ),

              itemCount: products.length,
              itemBuilder: (context, index) {
                final product = products[index];
                return ProductCard(
                  product: product,
                  onTap: () {
                    _onProductTap(product);
                  },
                );
              },
            ),
          ),
        ),
      ],
    );
  }

  void _onProductTap(Product product) {
    showModalBottomSheet(
      context: context,
      builder: (context) => _buildProductDetailBottomSheet(product),
    );
  }

  Widget _buildProductDetailBottomSheet(Product product) {
    return Container(
      height: MediaQuery.of(context).size.height * 0.6,
      decoration: const BoxDecoration(
        color: AppColors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(20),
          topRight: Radius.circular(20),
        ),
      ),
      child: Column(
        children: [
          // Handle bar
          Container(
            width: 40,
            height: 4,
            margin: const EdgeInsets.symmetric(vertical: 12),
            decoration: BoxDecoration(
              color: AppColors.brown.withOpacity(0.3),
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          // N·ªôi dung
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // T√™n product
                  Text(
                    product.name,
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: AppColors.brown,
                    ),
                  ),

                  const SizedBox(height: 8),

                  // M√¥ t·∫£ product
                  Text(
                    product.description,
                    style: const TextStyle(
                      fontSize: 16,
                      color: AppColors.darkGreen,
                    ),
                  ),

                  const SizedBox(height: 16),

                  // Danh s√°ch gi√° (n·∫øu c√≥ nhi·ªÅu options)
                  if (product.productDetails.isNotEmpty) ...[
                    const Text(
                      'T√πy ch·ªçn:',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: AppColors.brown,
                      ),
                    ),
                    const SizedBox(height: 8),

                    // Danh s√°ch options
                    ...product.productDetails
                        .map(
                          (detail) => Padding(
                            padding: const EdgeInsets.symmetric(vertical: 4),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Text(
                                  detail.size ?? 'M·∫∑c ƒë·ªãnh',
                                  style: const TextStyle(
                                    fontSize: 16,
                                    color: AppColors.brown,
                                  ),
                                ),
                                Text(
                                  detail.formattedPrice,
                                  style: const TextStyle(
                                    fontSize: 16,
                                    fontWeight: FontWeight.bold,
                                    color: AppColors.gray,
                                  ),
                                ),
                              ],
                            ),
                          ),
                        )
                        .toList(),
                  ],

                  const Spacer(),

                  // Button th√™m v√†o gi·ªè h√†ng
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton(
                      onPressed: () {
                        Navigator.pop(context);

                        // Hi·ªÉn th·ªã snackbar
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              'ƒê√£ th√™m "${product.name}" v√†o gi·ªè h√†ng',
                            ),
                            backgroundColor: AppColors.gray,
                            duration: const Duration(seconds: 2),
                          ),
                        );
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.gray,
                        foregroundColor: AppColors.white,
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text(
                        'Th√™m v√†o gi·ªè h√†ng',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
